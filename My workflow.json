{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook-endpoint",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "6f7eaa0b-a5fd-49cf-99ab-ac6d56ae2dcf",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -160,
        176
      ],
      "webhookId": "webhook-unique-id"
    },
    {
      "parameters": {
        "jsCode": "// Schema validation logic\nconst inputData = $input.all();\nconst results = [];\n\nfor (const item of inputData) {\n  const data = item.json;\n  \n  // Define expected schema\n  const requiredFields = ['email', 'name', 'action'];\n  const errors = [];\n  \n  // Validate required fields\n  for (const field of requiredFields) {\n    if (!data[field] || data[field].trim() === '') {\n      errors.push(`Missing required field: ${field}`);\n    }\n  }\n  \n  // Validate email format\n  if (data.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(data.email)) {\n    errors.push('Invalid email format');\n  }\n  \n  // Add validation result\n  results.push({\n    json: {\n      ...data,\n      validationPassed: errors.length === 0,\n      validationErrors: errors,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "25f5bc6c-4bcf-48e0-99f4-7650ce921d92",
      "name": "Schema Validation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        64,
        176
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.validationPassed }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "8534ff3c-edd9-4421-9221-f92763770006",
      "name": "Conditional Route",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        288,
        176
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://jsonplaceholder.typicode.com/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer your-api-token"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{ $json.name }}"
            },
            {
              "name": "body",
              "value": "={{ $json.action }}"
            },
            {
              "name": "userId",
              "value": "1"
            },
            {
              "name": "email",
              "value": "={{ $json.email }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "03bee074-d0f8-47c5-8554-1a4a8febd66b",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        496,
        80
      ]
    },
    {
      "parameters": {
        "jsCode": "// Error fallback processing\nconst inputData = $input.all();\nconst results = [];\n\nfor (const item of inputData) {\n  const data = item.json;\n  \n  results.push({\n    json: {\n      success: false,\n      error: 'Validation failed',\n      originalData: data,\n      validationErrors: data.validationErrors || ['Unknown validation error'],\n      timestamp: new Date().toISOString(),\n      message: 'Request was rejected due to validation errors'\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "556c1da8-271d-4b6b-a833-5a59f219f0b7",
      "name": "Error Fallback",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        272
      ]
    },
    {
      "parameters": {
        "jsCode": "// Success response processing\nconst inputData = $input.all();\nconst results = [];\n\nfor (const item of inputData) {\n  const data = item.json;\n  \n  results.push({\n    json: {\n      success: true,\n      message: 'Request processed successfully',\n      apiResponse: data,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nreturn results;"
      },
      "id": "c681c5e7-10c0-4602-b8dd-deef8dbc1650",
      "name": "Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        80
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "f37abf96-c085-4155-97ae-2d1e5bfb1982",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        944,
        176
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Schema Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schema Validation": {
      "main": [
        [
          {
            "node": "Conditional Route",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conditional Route": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Fallback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Fallback": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f7836578-9f2c-4041-b526-1ee175372d82",
  "meta": {
    "instanceId": "8628d20dc7c8e1bcb3600c869e800487a26499521ddf55998190c9fa45c5d070"
  },
  "id": "AaFKpU1pATSfhCEg",
  "tags": []
}